# Docker Compose Configuration for Zelus
# Additional services server - CPU only machine (8 cores, 32GB RAM)
# Services: OpenAPI servers (brave_web_search, weather, graphiti, sql), Model registry

version: '3.8'

services:
  # Brave Web Search OpenAPI Server
  openapi-brave-web-search:
    build:
      context: ./openapi-servers/brave_web_search
      dockerfile: Dockerfile
    container_name: openapi-brave-web-search
    restart: unless-stopped
    hostname: brave-search.zelus.local
    networks:
      - ai-network
    ports:
      - "8031:8000"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS}
      BRAVE_API_KEY: ${BRAVE_API_KEY}
      CACHE_TTL: 3600
      MAX_RESULTS: 20
      SAFE_SEARCH: moderate
      REDIS_URL: redis://default:${REDIS_PASSWORD}@erebus.local:6379/4
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Weather OpenAPI Server
  openapi-weather:
    build:
      context: ${OPENAPI_SERVERS_PATH:-/home/shaun/repos/openapi-servers}/servers/weather
      dockerfile: Dockerfile
    container_name: openapi-weather
    restart: unless-stopped
    hostname: weather.zelus.local
    networks:
      - ai-network
    ports:
      - "8032:8000"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS}
      OPENWEATHER_API_KEY: ${OPENWEATHER_API_KEY}
      DEFAULT_UNITS: metric
      CACHE_TTL: 1800  # 30 minutes
      REDIS_URL: redis://default:${REDIS_PASSWORD}@erebus.local:6379/5
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Graphiti Knowledge Graph OpenAPI Server
  openapi-graphiti:
    build:
      context: ${OPENAPI_SERVERS_PATH:-/home/shaun/repos/openapi-servers}/servers/graphiti
      dockerfile: Dockerfile
    container_name: openapi-graphiti
    restart: unless-stopped
    hostname: graphiti.zelus.local
    networks:
      - ai-network
    ports:
      - "8033:8000"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS}
      NEO4J_URI: bolt://neo4j.zelus.local:7687
      NEO4J_USER: neo4j
      NEO4J_PASSWORD: ${NEO4J_PASSWORD:-neo4j_password}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-}
      OPENAI_API_BASE: http://litellm.orpheus.local:4000/v1
      DEFAULT_MODEL: llama3.2
    volumes:
      - graphiti-data:/app/data
    depends_on:
      - neo4j
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'

  # Neo4j Graph Database for Graphiti
  neo4j:
    image: neo4j:5-community
    container_name: neo4j
    restart: unless-stopped
    hostname: neo4j.zelus.local
    networks:
      - ai-network
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      NEO4J_AUTH: neo4j/${NEO4J_PASSWORD:-neo4j_password}
      NEO4J_dbms_memory_pagecache_size: 2G
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_heap_initial__size: 1G
      NEO4J_dbms_security_procedures_unrestricted: "apoc.*"
      NEO4J_dbms_security_procedures_allowlist: "apoc.*"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '2'
        reservations:
          memory: 4G
          cpus: '1'

  # SQL OpenAPI Server
  openapi-sql:
    build:
      context: ${OPENAPI_SERVERS_PATH:-/home/shaun/repos/openapi-servers}/servers/sql
      dockerfile: Dockerfile
    container_name: openapi-sql
    restart: unless-stopped
    hostname: sql.zelus.local
    networks:
      - ai-network
    ports:
      - "8034:8000"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGINS: ${CORS_ORIGINS}
      # Multiple database connections
      DATABASE_URLS: |
        {
          "main": "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@erebus.local:5432/${POSTGRES_DB}",
          "openwebui": "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@erebus.local:5432/openwebui",
          "litellm": "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@erebus.local:5432/litellm"
        }
      ALLOWED_OPERATIONS: "SELECT,INSERT,UPDATE,DELETE"
      MAX_QUERY_TIME: 30  # seconds
      READ_ONLY: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Model Registry Service
  model-registry:
    build:
      context: ./model-registry
      dockerfile: Dockerfile
    container_name: model-registry
    restart: unless-stopped
    hostname: model-registry.zelus.local
    networks:
      - ai-network
    ports:
      - "8040:8000"
    environment:
      LOG_LEVEL: ${LOG_LEVEL:-info}
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@erebus.local:5432/model_registry
      S3_ENDPOINT: http://poseidon.local:9000
      S3_ACCESS_KEY: ${S3_ACCESS_KEY:-minioadmin}
      S3_SECRET_KEY: ${S3_SECRET_KEY:-minioadmin}
      S3_BUCKET: models
      REDIS_URL: redis://default:${REDIS_PASSWORD}@erebus.local:6379/6
    volumes:
      - ${NFS_MODELS_PATH}:/models:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-zelus
    restart: unless-stopped
    hostname: node-exporter.zelus.local
    networks:
      - ai-network
      - monitoring-network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*|docker.*|br-.*)$$'
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Service registrar
  service-registrar:
    build:
      context: ./service-registrar
      dockerfile: Dockerfile
    container_name: service-registrar-zelus
    restart: "no"
    networks:
      - ai-network
    environment:
      REGISTRY_URL: http://hephaestus.local:8090
      API_KEY: ${SERVICE_REGISTRY_API_KEY}
      SERVICES: |
        [
          {
            "name": "neo4j",
            "host": "zelus.local",
            "port": 7687,
            "health_check_url": "http://zelus.local:7474",
            "tags": ["database", "graph", "neo4j"]
          },
          {
            "name": "openapi-brave-web-search",
            "host": "zelus.local",
            "port": 8031,
            "health_check_url": "http://zelus.local:8031/health",
            "tags": ["openapi", "tool", "search"]
          },
          {
            "name": "openapi-weather",
            "host": "zelus.local",
            "port": 8032,
            "health_check_url": "http://zelus.local:8032/health",
            "tags": ["openapi", "tool", "weather"]
          },
          {
            "name": "openapi-graphiti",
            "host": "zelus.local",
            "port": 8033,
            "health_check_url": "http://zelus.local:8033/health",
            "tags": ["openapi", "tool", "knowledge-graph"]
          },
          {
            "name": "openapi-sql",
            "host": "zelus.local",
            "port": 8034,
            "health_check_url": "http://zelus.local:8034/health",
            "tags": ["openapi", "tool", "database"]
          },
          {
            "name": "model-registry",
            "host": "zelus.local",
            "port": 8040,
            "health_check_url": "http://zelus.local:8040/health",
            "tags": ["model", "registry", "management"]
          }
        ]
    depends_on:
      - neo4j
      - openapi-brave-web-search
      - openapi-weather
      - openapi-graphiti
      - openapi-sql
      - model-registry

networks:
  ai-network:
    external: true
  monitoring-network:
    external: true

volumes:
  neo4j-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/neo4j/data
  neo4j-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_DIR}/neo4j
  neo4j-import:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/neo4j/import
  neo4j-plugins:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/neo4j/plugins
  graphiti-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/graphiti
