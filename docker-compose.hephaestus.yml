# Docker Compose Configuration for Hephaestus
# Edge services server - Small machine (6 cores, 8GB RAM)
# Services: Traefik, Service Registry, Uptime Kuma

version: '3.8'

services:
  # Traefik - Reverse proxy and load balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik
    restart: unless-stopped
    hostname: traefik.hephaestus.local
    networks:
      - ai-network
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    environment:
      CF_DNS_API_TOKEN: ${CF_DNS_API_TOKEN:-}  # For Let's Encrypt DNS challenge
      TRAEFIK_LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./configs/traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ./configs/traefik/dynamic:/etc/traefik/dynamic:ro
      - traefik-certs:/letsencrypt
      - traefik-logs:/logs
    command:
      # Static configuration via command line
      - "--api.dashboard=true"
      - "--api.debug=false"
      - "--ping=true"
      - "--log.level=${LOG_LEVEL:-info}"
      - "--log.filepath=/logs/traefik.log"
      - "--accesslog=true"
      - "--accesslog.filepath=/logs/access.log"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=ai-network"
      - "--providers.file.directory=/etc/traefik/dynamic"
      - "--providers.file.watch=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.buckets=0.1,0.3,1.2,5.0"
      - "--metrics.prometheus.entrypoint=metrics"
      - "--entrypoints.metrics.address=:8082"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:${TRAEFIK_DASHBOARD_PASSWORD:-$$2y$$10$$default}"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '2'
        reservations:
          memory: 256M
          cpus: '1'

  # Simple Service Registry API
  service-registry:
    build:
      context: ./service-registry
      dockerfile: Dockerfile
    container_name: service-registry
    restart: unless-stopped
    hostname: registry.hephaestus.local
    networks:
      - ai-network
    ports:
      - "8090:8000"
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@erebus.local:5432/service_registry
      REDIS_URL: redis://default:${REDIS_PASSWORD}@erebus.local:6379/1
      API_KEY: ${SERVICE_REGISTRY_API_KEY:-default_api_key}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    volumes:
      - ./service-registry:/app:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.registry.rule=Host(`registry.${DOMAIN}`)"
      - "traefik.http.services.registry.loadbalancer.server.port=8000"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '1'
        reservations:
          memory: 128M
          cpus: '0.5'

  # Uptime Kuma - Service monitoring dashboard
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: uptime-kuma
    restart: unless-stopped
    hostname: uptime.hephaestus.local
    networks:
      - ai-network
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      UPTIME_KUMA_DISABLE_FRAME_SAMEORIGIN: 0
    volumes:
      - uptime-kuma-data:/app/data
    healthcheck:
      test: ["CMD-SHELL", "node", "/app/extra/healthcheck.js"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.uptime.rule=Host(`uptime.${DOMAIN}`)"
      - "traefik.http.services.uptime.loadbalancer.server.port=3001"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'

  # Portainer Agent - For remote container management
  portainer-agent:
    image: portainer/agent:latest
    container_name: portainer-agent
    restart: unless-stopped
    networks:
      - ai-network
    ports:
      - "9001:9001"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    environment:
      AGENT_SECRET: ${PORTAINER_AGENT_SECRET:-default_secret}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.25'

  # Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-hephaestus
    restart: unless-stopped
    hostname: node-exporter.hephaestus.local
    networks:
      - ai-network
      - monitoring-network
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
      - '--collector.netclass.ignored-devices=^(veth.*|docker.*|br-.*)$$'
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.5'
        reservations:
          memory: 64M
          cpus: '0.1'

  # Traefik Exporter - Metrics from Traefik
  traefik-exporter:
    image: prom/blackbox-exporter:latest
    container_name: traefik-exporter
    restart: unless-stopped
    networks:
      - ai-network
      - monitoring-network
    ports:
      - "9115:9115"
    volumes:
      - ./configs/blackbox/blackbox.yml:/etc/blackbox_exporter/config.yml:ro
    command:
      - '--config.file=/etc/blackbox_exporter/config.yml'
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'
        reservations:
          memory: 32M
          cpus: '0.1'

  # DDNS Updater (optional - for dynamic DNS)
  ddns-updater:
    image: qmcgaw/ddns-updater:latest
    container_name: ddns-updater
    restart: unless-stopped
    networks:
      - ai-network
    environment:
      CONFIG: |
        {
          "settings": {
            "period": "5m",
            "update_cooldown_period": "5m",
            "publicip_fetchers": ["ipinfo", "google", "opendns"],
            "publicip_http_providers": ["ipinfo", "google", "opendns"],
            "log_level": "info",
            "log_caller": true
          },
          "records": []
        }
    volumes:
      - ddns-data:/updater/data
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.25'
        reservations:
          memory: 32M
          cpus: '0.1'

networks:
  ai-network:
    external: true
  monitoring-network:
    external: true

volumes:
  traefik-certs:
    driver: local
  traefik-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${LOGS_DIR}/traefik
  uptime-kuma-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR}/uptime-kuma
  ddns-data:
    driver: local
